# -*- coding: utf-8 -*-
"""TubesVisdat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TO-zYVo5z4j7G2M8jrftSmasmtIeYf_u
"""

import pandas as pd
from bokeh.io import curdoc
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import Slider, Select

data = pd.read_csv("https://raw.githubusercontent.com/dzikrisinatria/tubes-visdat-final/main/datacovmar.csv")
data.set_index('Date', inplace=True)

data = data.drop(labels=['Location ISO Code', 'Total Active Cases', 'Location Level', 'City or Regency',
                  'Country', 'Continent', 'Island', 'Time Zone', 'Special Status', 'Total Regencies', 'Total Cities',
                  'Total Districts', 'Total Urban Villages', 'Total Rural Villages', 'Area (km2)', 'Population',
                  'Population Density', 'Longitude', 'Latitude', 'New Cases per Million', 'Total Cases per Million',
                  'New Deaths per Million', 'Total Deaths per Million', 'Total Deaths per 100rb', 'Case Fatality Rate',
                  'Case Recovered Rate', 'Growth Factor of New Cases', 'Growth Factor of New Deaths'], axis=1)

data = data.dropna()

data = data.rename(columns={"Location": "location", "New Cases": "new_cases", "New Deaths": "new_deaths", "New Recovered": "new_recovered", 
                            "New Active Cases": "new_active_cases", "Total Cases": "total_cases", "Total Deaths": "total_deaths", "Total Recovered": "total_recovered", 
                            "Province": "province"})

# membuat daftar unique list dari kolom province
province_list = data.province.unique().tolist()

# membuat color mapper
color_mapper = CategoricalColorMapper(factors=province_list, palette=Spectral6)

# membuat column data source
source = ColumnDataSource(data={
    'x'          : data.loc[2].total_cases,
    'y'          : data.loc[2].total_deaths,
    'location'   : data.loc[2].location,
    'province'   : data.loc[2].province,
})

# membuat figure plot
TOOLTIPS = [
    ("Location", "@location"),
    ("x", "@x"),
    ("y", "@y")
]
plot = figure(title='COVID-19 Statistic for March 2', x_axis_label='Total Cases', y_axis_label='Total Deaths',
           plot_height=700, plot_width=1000, tooltips=TOOLTIPS)

# menambahkan circle glyph untuk figure dari "plot"
plot.circle(x='x', y='y', source=source, fill_alpha=0.8, size=10, 
           color=dict(field='province', transform=color_mapper), legend='province')

# set legend dan axis atribut
plot.legend.location = 'bottom_right'
plot.add_layout(plot.legend[0], 'right')

# membuat fungsi callback: update_plot
def update_plot(attr, old, new):
    # ubah "date" menjadi "slider.value" dan "source.data" menjadi "new_data"
    date = slider.value
    x = x_select.value
    y = y_select.value
    # Label axes of plot
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    # new data
    new_data = {
    'x'          : data.loc[date][x],
    'y'          : data.loc[date][y],
    'location'   : data.loc[date].location,
    'province'   : data.loc[date].province,
    }
    source.data = new_data
    
    # menambahkan title ke figure: plot.title.text
    plot.title.text = 'COVID-19 Statistic for March %d' % date

# membuat slider object: slider
slider = Slider(start=2, end=31, step=1, value=2, title='Date')
slider.on_change('value',update_plot)

# membuat dropdown menu untuk x dan y axis
# membuat dropdown Select widget untuk x data: x_select
x_select = Select(
    options=['new_cases', 'new_deaths', 'new_recovered', 'new_active_cases', 'total_cases', 'total_deaths', 'total_recovered'],
    value='total_cases',
    title='x-axis data'
)
# melampirkan update_plot callback ke dalam "value" dari x_select
x_select.on_change('value', update_plot)

# membuat dropdown Select widget for the y data: y_select
y_select = Select(
    options=['new_cases', 'new_deaths', 'new_recovered', 'new_active_cases', 'total_cases', 'total_deaths', 'total_recovered'],
    value='total_deaths',
    title='y-axis data'
)
# melampirkan update_plot callback ke dalam "value" dari y_select
y_select.on_change('value', update_plot)
    
# membuat layout dan menambahkannya ke dokumen saat ini
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)
